import java.net.Inet4Address;
import java.util.ArrayList;

class FlagPeaks {
	public int solution(int[] A) {
    	ArrayList<Integer> list = new ArrayList<>();
        int[] nextPeaks = nextPeaks(A);  
        int result = 0;
        boolean[] peaks = createPeaks(A);
        int counter= 0;
        for(int i=0; i<peaks.length; i++) {
        	if(peaks[i]) {
        		counter++;
        		list.add(A[i]);
        	}
        		
        	 }
        
        for(int i=0; i<peaks.length-1; i++) {
        	if(Math.abs(list.get(i)-list.get(i+1)) < counter){
        		counter--;
        	}
        }
        	
        
        return  counter;
    }

	private boolean[] createPeaks(int[] A) {
		boolean[] peaks = new boolean[A.length];
		for (int i = 1; i < A.length - 1; i++) {
			if (A[i - 1] < A[i] && A[i] > A[i + 1]) {
				peaks[i] = true;
			}
		}

		return peaks;
	}

	private int[] nextPeaks(int[] A) {
		boolean[] peaks = createPeaks(A);
		int[] nextPeaks = new int[A.length];
		// the last position is always -1
		nextPeaks[A.length - 1] = -1;

		for (int i = A.length - 2; i >= 0; i--) {
			nextPeaks[i] = peaks[i] ? i : nextPeaks[i + 1];
		}

		return nextPeaks;
	}
}
